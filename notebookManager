{"files":[{"id":"6af28935-6fea-4667-8db8-a82df679009b","name":"Notebook","type":"server_js","source":"/*****************************************************************************\n * Creates a new daily notebook entry\n */\nfunction makeNewEntry() {\n  //Create new file \n  var myDate \u003d new Date();             \n  var myDayString \u003d myDate.getDate().toString();\n  if(myDayString.length \u003d\u003d 1) //make day always 2 chars wide\n    myDayString \u003d \"0\" + myDayString;                      //fix 0 indexed month\n  var dateString \u003d myDate.getYear().toString() + \"_\" + (myDate.getMonth() + 1).toString() + \"_\" + myDayString;\n  var doc \u003d DocumentApp.create(dateString);\n  \n  //Add a header\n  doc.addHeader().appendParagraph(\"Andy MacGregor\u0027s notebook at Valeo\\n\"\n                                 + dateString);\n  \n  var ntbkFolder;\n  var fldrs \u003d DriveApp.getFolders();\n  \n  while(fldrs.hasNext()){ //asking for trouble\n    ntbkFolder \u003d fldrs.next();\n    if(ntbkFolder.getName() \u003d\u003d \"Notebook\")\n      break;\n  }\n  \n  //move to notebook folder from root\n  moveFile(DriveApp.getFileById(doc.getId()), ntbkFolder);\n \n}\n\n/*\n * Creates a new glob summary entry\n */\nfunction makeNewSummary() {\n  //Create new file \n  var myDate \u003d new Date();                                                 //fix 0 indexed month\n  var title \u003d \"Summary of week of \" + myDate.getYear().toString() + \"_\" + (myDate.getMonth() + 1).toString() + \"_\" + myDate.getDate().toString();\n  var doc \u003d DocumentApp.create(title);\n  \n  //create document content\n  doc.getBody().appendParagraph(\"#Insert a brief \u0026 detailed description of this week\u0027s work where indicated.\\n\" +\n                                \"#Lines starting with \u0027#\u0027 will be ignored.\\n\" +\n                                \"#The first non-comment line is interpreted as your title:\\n\" +\n                                \"Replace this with your title:\\n\" + \n                                \"#Everything else in the file is interpreted as a description\\n\\n\" +\n                                \"#Insert Description here \\n\");\n  \n  var ntbkfold;\n  var ntbks \u003d DriveApp.searchFolders(\"title contains Notebook\");\n  if(ntbks.hasNext()){\n    ntbkfold \u003d\u003d ntbks.next();\n  } else {\n    throw \"Notebook folder not found\";\n  }\n    \n  //move from root to notebook file\n  moveFile(DriveApp.getFileById(doc.getId()), ntbkfold);\n\n}\n\n/*****************************************************************************\n * Call on Friday nights to glob all of the previous week\u0027s notes into one file then archive\n */\nfunction globWeeklyEntries(){\n  var masterNotebook;\n  var masterNotebookDoc;\n  var oldFolder;\n  var notebookFolder;\n  var summaryFile;\n  var summaryFileDoc;\n  var logDocs;\n  var toc; //table of contents\n  //manipulate GDrive to find the master file, old folder, weekly summary, and logs to glob\n  \n  //open the file in master\n  if(DriveApp.getFilesByName(\"Notebook_Master\").hasNext()){\n    masterNotebook \u003d DriveApp.getFilesByName(\"Notebook_Master\").next();\n  } else {\n    masterNotebook \u003d DriveApp.createFile(\"Notebook_Master\", \"\", MimeType.GOOGLE_DOCS);\n  }\n  \n  //open old folder\n  if(DriveApp.getFoldersByName(\"Notebook_OldEntries\").hasNext()){\n    oldFolder \u003d DriveApp.getFoldersByName(\"Notebook_OldEntries\").next();\n  } else {\n    //create a new old folder and move it to Notebook. (no error checking involved)\n    oldFolder \u003d DriveApp.createFolder(\"Notebook_OldEntries\");\n    DriveApp.getFoldersByName(\"Notebook\").next().addFolder(oldFolder);\n    DriveApp.getRootFolder().removeFolder(oldFolder);\n  }\n  \n  if(DriveApp.getFoldersByName(\"Notebook\").hasNext())\n    notebookFolder \u003d DriveApp.getFoldersByName(\"Notebook\").next();\n  \n  ///open weekly summary\n  var searchResults \u003d DriveApp.searchFiles(\"title contains \u0027Summary\u0027\");\n  //! Here\u0027s where its tricky, because searchResults can return an \u0027empty object\u0027\n  if(searchResults.hasNext()){ \n    summaryFile \u003d searchResults.next();\n  } else {\n    //no summary: no blob by removing summary\n    console.log(\"No summary found so blob abborted\\n\");\n    return 1;\n  }\n  \n  //find logs to glob\n  var logsToGlob \u003d [];\n  var logs \u003d notebookFolder.searchFiles(\"not (title contains \u0027Summary\u0027)\");\n  while(logs.hasNext())\n    logsToGlob.push(logs.next());\n  \n  ///Convert all of the googleDrive files into Google docs\n  masterNotebookDoc \u003d DocumentApp.openById(masterNotebook.getId());\n  summaryFileDoc \u003d DocumentApp.openById(summaryFile.getId());\n  logDocs \u003d [];\n  for(var i \u003d 0; i \u003c logsToGlob.length; i++)\n    logDocs.push(DocumentApp.openById(logsToGlob[i].getId()));\n  logDocs \u003d logDocs.reverse(); //Reverse to get it in alphabetical order (may change)\n  \n  //get master toc // and do nothing with it\n  var findTocResult \u003d masterNotebookDoc.getBody().findElement(DocumentApp.ElementType.TABLE_OF_CONTENTS);\n  if(findTocResult)\n    toc \u003d findTocResult.getElement().asTableOfContents();\n  \n  ///skim weekly summary for title and description\n  var summaryContents \u003d summaryFileDoc.getBody().getText();\n  var cleanSummaryContents \u003d \"\";\n  \n  //clean comment lines of summary \u0026 extract title\n  var summaryLines \u003d summaryContents.split(\"\\n\");\n  var summaryTitle \u003d \"\";\n  for(var i \u003d 0; i \u003c summaryLines.length; i++){\n    if(summaryLines[i].charAt(0) \u003d\u003d \"#\"){\n      continue;\n    } else {\n      summaryLines[i].replace(\"\\n\", \" \");\n      //set the first non-comment line to the title\n      if(!summaryTitle) {\n        summaryTitle \u003d summaryLines[i];\n      } else {\n        cleanSummaryContents \u003d cleanSummaryContents + (summaryLines[i] + \"\\n\");\n      }\n    }\n  }\n  \n  //add a new week section to master w/ summary title \u0026 details\n  masterNotebookDoc.getBody().appendHorizontalRule();\n  \n  var weeklyHeader \u003d masterNotebookDoc.getBody().appendParagraph(summaryFile.getName() + \": \" + summaryTitle);\n  weeklyHeader.setHeading(DocumentApp.ParagraphHeading.HEADING2);\n  \n  masterNotebookDoc.getBody().appendParagraph(cleanSummaryContents);\n  \n  ///for each log file in Notebook\n  for(var i \u003d 0; i \u003c logDocs.length; i++){\n    \n    //add a subsection to the master notebook\n    var title \u003d logDocs[i].getName() + \": \" + extractHeading(logDocs[i].getBody(), \n                                                             DocumentApp.ParagraphHeading.TITLE, \n                                                             false,\n                                                             true,\n                                                             DocumentApp.ParagraphHeading.NORMAL);\n    var dailyHeader \u003d masterNotebookDoc.getBody().appendParagraph(title);\n    dailyHeader.setHeading(DocumentApp.ParagraphHeading.HEADING3);\n    \n    //sanitize daily log\u0027s headings to make appropriate subsections( assuming H1-\u003eH4, H2-\u003eH5 and H3-\u003eH4 )\n    extractHeading(logDocs[i].getBody(),DocumentApp.ParagraphHeading.HEADING1, \n                                                             false,\n                                                             true,\n                                                             DocumentApp.ParagraphHeading.HEADING4);\n    extractHeading(logDocs[i].getBody(),DocumentApp.ParagraphHeading.HEADING2, \n                                                             false,\n                                                             true,\n                                                             DocumentApp.ParagraphHeading.HEADING5);\n    extractHeading(logDocs[i].getBody(),DocumentApp.ParagraphHeading.HEADING3, \n                                                             false,\n                                                             true,\n                                                             DocumentApp.ParagraphHeading.HEADING4);\n    //copy entry contents to subsection\n    concatDocs(masterNotebookDoc, logDocs[i]);\n  } // \\for each log\n  \n  //move all the old logs away\n  for(var i \u003d 0; i \u003c logsToGlob.length; i++)\n  {\n    oldFolder.addFile(logsToGlob[i]);\n    notebookFolder.removeFile(logsToGlob[i]);\n  }\n  \n  //delete the summary file to prevent an extra glob\n  notebookFolder.removeFile(summaryFile);\n  \n  /*\n  * When Google updates their API\n  * refresh the table of contents here\n  */ \n}\n\n\n/****************************************************************************\n * Pulls every line containing TODO from all notebook entries and....\n * (sends an email?) in the morning detailing all of the todos..\n * pull from master notebook too\n */\nfunction highlightTODO(){\n  var todoList \u003d [];\n  var masterTodos \u003d [];\n  var email \u003d Session.getActiveUser().getEmail();\n  \n  //Exctract all paragraphs starting with TODO from current Notebook entries\n  var i \u003d DriveApp.getFoldersByName(\"Notebook\");\n  var j;\n  while(i.hasNext())\n  {\n    var entry \u003d i.next();\n    j \u003d entry.searchFiles(\"\");\n    while(j.hasNext())\n    {\n      var doc \u003d DocumentApp.openById(j.next().getId());\n      var currentBody \u003d doc.getBody();\n      var range \u003d currentBody.findText(\"^TODO.*?$\");\n      \n      while(range)\n      {\n        var myPar \u003d range.getElement().asText().getText();\n        todoList.push([doc.getName(), myPar]);\n        range \u003d currentBody.findText(\"^TODO.*?$\", range);\n        Logger.log(\"From \" + doc.getName() + \"... \" + myPar);\n      }\n    }\n  }\n  \n  //now scrape the master notebook\n  i \u003d DriveApp.getFoldersByName(\"Notebook_Master\");\n  while(i.hasNext())\n  {\n    var noteBook \u003d i.next();\n    j \u003d noteBook.searchFiles(\"\");\n    while(j.hasNext())\n    {\n      var file \u003d j.next();\n      var currentBody \u003d DocumentApp.openById(file.getId()).getBody();\n      var range \u003d currentBody.findText(\"^TODO.*?$\");\n      \n      while(range)\n      {\n        var myPar \u003d range.getElement().asText().getText();\n        masterTodos.push(myPar);\n        range \u003d currentBody.findText(\"^TODO.*?$\", range);\n        Logger.log(\"From master...\" + myPar);\n      }\n    }\n  }\n  \n  //compose them into an email if there is anything\n  if(todoList.length \u003d\u003d 0 \u0026\u0026 masterTodos.length \u003d\u003d 0)\n    return;\n  var mailBody \u003d \"Daily TODO list from notebook: \\n\\n\";\n  if(todoList.length \u003e 0) {\n    for(var i \u003d 0; i \u003c todoList.length; i++) {\n      mailBody \u003d mailBody.concat(todoList[i][0], \": \", todoList[i][1].replace(\"TODO\", \"\"), \"\\n\");\n    }\n  }\n  \n  if(masterTodos.length \u003e 0) {    \n    mailBody \u003d mailBody.concat(\"\\n----\\n\");\n    for(var i \u003d 0; i \u003c masterTodos.length; i++) {\n      mailBody \u003d mailBody.concat(\"M: \", masterTodos[i].replace(\"TODO\", \"\"), \"\\n\");\n    }\n  }\n  \n  mailBody \u003d mailBody.concat(\"\\n\\n-Sent automatically from Notebook\\n\");\n  \n  MailApp.sendEmail(email, \n                    \"TODO summary\", \n                    mailBody);\n}\n\n/****************** Helpers **********************/\n\n/*\n * Does exactly what it says it does\n * If source isn\u0027t specified, assumes its from root (this might not be the best idea because multiple folders can own a file)\n * should be in GDrive File/Folder types\n */\nfunction moveFile(file, destFolder, sourceFolder){\n  if(!file || ! destFolder)\n    throw \"fileName or destFolder not specified\";\n  sourceFolder \u003d sourceFolder || DriveApp.getRootFolder();\n  \n  destFolder.addFile(file);\n  sourceFolder.removeFile(file);\n}\n\n/*\n * Searches the body for any title sections\n * Removes all titles and returns the first found\n */\nfunction extractTitle(body) {\n  var firstTitle \u003d \"\";\n  \n  var rElement \u003d body.findElement(DocumentApp.ElementType.PARAGRAPH)\n  var par;\n  \n  //while there are more paragraphs to find\n  while(rElement)\n  {\n    par \u003d rElement.getElement().asParagraph();\n    //is this paragraph a title?\n    if(par.getHeading() \u003d\u003d DocumentApp.ParagraphHeading.TITLE)\n    {\n      //if the title isn\u0027t already set\n      if(!firstTitle)\n      {\n        firstTitle \u003d par.getText()\n      }\n      par.setHeading(DocumentApp.ParagraphHeading.NORMAL);\n    }\n    \n    //find the next in line\n    rElement \u003d body.findElement(DocumentApp.ElementType.PARAGRAPH, rElement);\n  }\n  \n  return firstTitle;\n}\n\nfunction extractHeading(body, headingTypeFind, returnAllOccurances, replaceOccurances, headingTypeReplace) {\n  //default parameter hack\n  headingTypeFind \u003d headingTypeFind || DocumentApp.ParagraphHeading.HEADING1;\n  returnAllOccurances \u003d returnAllOccurances || false;\n  replaceOccurances \u003d replaceOccurances || true;\n  headingTypeReplace \u003d headingTypeReplace || DocumentApp.ParagraphHeading.NORMAL;\n  //\\default parameters\n  \n  var firstTitle \u003d \"\";\n  var headingList \u003d [];\n  \n  var rElement \u003d body.findElement(DocumentApp.ElementType.PARAGRAPH)\n  var par;\n  \n  //while there are more paragraphs to find\n  while(rElement){\n    par \u003d rElement.getElement().asParagraph();\n    //is this paragraph a target heading?\n    if(par.getHeading() \u003d\u003d headingTypeFind){\n      //adds this heading to the collection\n      headingList.push(par.getText());\n      \n      //if firstTitle isn\u0027t already found\n      if(!firstTitle){\n        firstTitle \u003d par.getText()\n      }\n      \n      //replace if asked for\n      if(replaceOccurances){\n        par.setHeading(headingTypeReplace);\n      }\n    }    \n    //find the next in line\n    rElement \u003d body.findElement(DocumentApp.ElementType.PARAGRAPH, rElement);\n  }\n  \n  //returns what was asked for\n  if(returnAllOccurances){\n    return headingList;\n  } else {\n    return firstTitle;\n  }\n}\n\n/* Takes two documents\n * - Copies the contents of nextDoc\n * - Appends them on to baseDoc\n *\n * !!!!This is Copy-pasta from stack overflow https://stackoverflow.com/questions/10692669/how-can-i-generate-a-multipage-text-document-from-a-single-page-template-in-goog\n */\nfunction concatDocs(baseDoc, nextDoc)\n{\n    var body \u003d baseDoc.getBody();\n    var otherBody \u003d nextDoc.getBody();\n  \n    var totalElements \u003d otherBody.getNumChildren();\n    for( var j \u003d 0; j \u003c totalElements; ++j ) {\n      var element \u003d otherBody.getChild(j).copy();\n      var type \u003d element.getType();\n      if( type \u003d\u003d DocumentApp.ElementType.PARAGRAPH )\n        body.appendParagraph(element);\n      else if( type \u003d\u003d DocumentApp.ElementType.TABLE )\n        body.appendTable(element);\n      else if( type \u003d\u003d DocumentApp.ElementType.LIST_ITEM )\n        body.appendListItem(element);\n      else if( type \u003d\u003d DocumentApp.ElementType.INLINE_IMAGE )\n        body.appendImage(element);\n      else if( type \u003d\u003d DocumentApp.ElementType.PAGE_BREAK )\n        body.appendPageBreak(element);\n      else if( type \u003d\u003d DocumentApp.ElementType.INLINE_DRAWING ) //maybbe this works? --more copy-pasta\n      {\n        var drawing \u003d element.asParagraph().copy();\n        body.appendParagraph(drawing);\n      }\n      else\n        throw new Error(\"According to the doc this type couldn\u0027t appear in the body: \"+type);\n    }\n   \n}"},{"id":"635aecdd-7764-41bd-b3d2-605497cd0665","name":"Experimental","type":"server_js","source":"\n/***\n * Make a new entry in the given notebook\n */\nfunction makeNewEntryN(notebook) {\n  //Create new file \n  var myDate \u003d new Date();             \n  var myDayString \u003d myDate.getDate().toString();\n  if(myDayString.length \u003d\u003d 1) //make day always 2 chars wide\n    myDayString \u003d \"0\" + myDayString;       \n                                                           //(v) fix 0 indexed month\n  var dateString \u003d myDate.getYear().toString() + \"_\" + (myDate.getMonth() + 1).toString() + \"_\" + myDayString;\n  var doc \u003d DocumentApp.create(dateString); //this is supposed to be fine.\n  \n  //Add a header\n  doc.addHeader().appendParagraph(notebook.longName + \"\\n\" + dateString);\n  \n  //Break here; examine the doc, there is nothing written.\n  var x \u003d DriveApp.getFolderById(notebook.rootFolderId).getName(); //DEBUG\n  \n  //move to notebook folder from root\n  moveFile(DriveApp.getFileById(doc.getId()), DriveApp.getFolderById(notebook.rootFolderId));\n}\n\n/**********************************************************************************\n * Creates a new glob summary entry\n */\nfunction makeNewSummaryN(notebook) {\n  //Create new file \n  var myDate \u003d new Date();                                 //(v) fix 0 indexed month\n  var title \u003d myDate.getYear().toString() + \"_\" + (myDate.getMonth() + 1).toString() + \"_\" + myDate.getDate().toString() + \"_Summary\";\n  var doc \u003d DocumentApp.create(title);\n  \n  //create document content\n  doc.getBody().appendParagraph(\"#Insert a brief \u0026 detailed description of this week\u0027s work where indicated.\\n\" +\n                                \"#Lines starting with \u0027#\u0027 will be ignored.\\n\" +\n                                \"#The first non-comment line is interpreted as your title:\\n\" +\n                                \"Replace this with your title:\\n\\n\" + \n                                \"#Everything else in the file is interpreted as a description\\n\\n\" +\n                                \"#Insert Description here \\n\");\n    \n  //move from root to notebook file\n  moveFile(DriveApp.getFileById(doc.getId()), DriveApp.getFolderById(notebook.rootFolderId));\n}\n\n/*****************************************************************************\n * Call on Friday nights to glob all of the previous week\u0027s notes into one file then archive\n */\nfunction globWeeklyEntriesN(notebook){\n  //get all the folders and files you need\n  var masterNotebook \u003d DriveApp.getFileById(notebook.masterNotebookId);\n  var oldFolder \u003d DriveApp.getFolderById(notebook.oldFolderId);\n  var notebookFolder \u003d DriveApp.getFolderById(notebook.rootFolderId);\n  \n  ///open weekly summary\n  var searchResults \u003d notebookFolder.searchFiles(\"title contains \u0027Summary\u0027\");\n  var summaryFile;\n  //! Here\u0027s where its tricky, because searchResults can return an \u0027empty object\u0027\n  if(searchResults.hasNext()){ \n    summaryFile \u003d searchResults.next();\n  } else {\n    //no summary: no blob by removing summary\n    console.log(\"No summary found so blob abborted\\n\");\n    return 1;\n  }\n  \n  //find logs to glob\n  var logsToGlob \u003d [];\n  var logs \u003d notebookFolder.searchFiles(\"not (title contains \u0027Summary\u0027)\");\n  while(logs.hasNext())\n    logsToGlob.push(logs.next());\n  \n  ///Convert all of the googleDrive files into Google docs\n  var masterNotebookDoc \u003d DocumentApp.openById(masterNotebook.getId());\n  var summaryFileDoc \u003d DocumentApp.openById(summaryFile.getId());\n  var logDocs \u003d [];\n  for(var i \u003d 0; i \u003c logsToGlob.length; i++)\n    logDocs.push(DocumentApp.openById(logsToGlob[i].getId()));\n  logDocs \u003d logDocs.reverse(); //Reverse to get it in alphabetical order (sounds jank)\n  \n  ///skim weekly summary for title and description\n  var summaryContents \u003d summaryFileDoc.getBody().getText();\n  var cleanSummaryContents \u003d \"\";\n  \n  //clean comment lines of summary \u0026 extract title\n  var summaryLines \u003d summaryContents.split(\"\\n\");\n  var summaryTitle \u003d \"\";\n  for(var i \u003d 0; i \u003c summaryLines.length; i++){\n    if(summaryLines[i].charAt(0) \u003d\u003d \"#\"){\n      continue;\n    } else {\n      summaryLines[i].replace(\"\\n\", \" \");\n      //set the first non-comment line to the title\n      if(!summaryTitle) {\n        summaryTitle \u003d summaryLines[i];\n      } else {\n        cleanSummaryContents \u003d cleanSummaryContents + (summaryLines[i] + \"\\n\");\n      }\n    }\n  }\n  \n  //add a new week section to master w/ summary title \u0026 details\n  masterNotebookDoc.getBody().appendHorizontalRule();\n  \n  var weeklyHeader \u003d masterNotebookDoc.getBody().appendParagraph(summaryFile.getName() + \": \" + summaryTitle);\n  weeklyHeader.setHeading(DocumentApp.ParagraphHeading.HEADING2);\n  \n  masterNotebookDoc.getBody().appendParagraph(cleanSummaryContents);\n  \n  ///for each log file in Notebook\n  for(var i \u003d 0; i \u003c logDocs.length; i++){\n    \n    //add a subsection to the master notebook\n    var title \u003d logDocs[i].getName() + \": \" + extractHeading(logDocs[i].getBody(), \n                                                             DocumentApp.ParagraphHeading.TITLE, \n                                                             false,\n                                                             true,\n                                                             DocumentApp.ParagraphHeading.NORMAL);\n    var dailyHeader \u003d masterNotebookDoc.getBody().appendParagraph(title);\n    dailyHeader.setHeading(DocumentApp.ParagraphHeading.HEADING3);\n    \n    //sanitize daily log\u0027s headings to make appropriate subsections( assuming H1-\u003eH4, H2-\u003eH5 and H3-\u003eH4 )\n    extractHeading(logDocs[i].getBody(),DocumentApp.ParagraphHeading.HEADING1, \n                                                             false,\n                                                             true,\n                                                             DocumentApp.ParagraphHeading.HEADING4);\n    extractHeading(logDocs[i].getBody(),DocumentApp.ParagraphHeading.HEADING2, \n                                                             false,\n                                                             true,\n                                                             DocumentApp.ParagraphHeading.HEADING5);\n    extractHeading(logDocs[i].getBody(),DocumentApp.ParagraphHeading.HEADING3, \n                                                             false,\n                                                             true,\n                                                             DocumentApp.ParagraphHeading.HEADING4);\n    //copy entry contents to subsection\n    concatDocs(masterNotebookDoc, logDocs[i]);\n    \n    //move all the old logs away\n    moveFile(logsToGlob[i], oldFolder, notebookFolder);\n  } // \\for each log\n  \n  //move all the summary file\n   moveFile(summaryFile, oldFolder, notebookFolder);\n}\n\n\n/****************************************************************************\n * Pulls every line containing TODO from all notebook entries and....\n * (sends an email?) in the morning detailing all of the todos..\n * pull from master notebook too\n */\nfunction highlightTODON(notebook){\n  var todoList \u003d [];\n  var masterTodos \u003d [];\n  var email \u003d Session.getActiveUser().getEmail();\n  \n  //Exctract all paragraphs starting with TODO from current Notebook entries and whatever is in the master folder\n  var searchDirs \u003d [DriveApp.getFolderById(notebook.rootFolderId), DriveApp.getFolderById(notebook.masterFolderId)];\n  //j \u003d iterator for files in dir\n  var j;\n  for(var i \u003d 0; i \u003c searchDirs.length; i++){\n    var entry \u003d searchDirs[i];\n    j \u003d entry.searchFiles(\"\");\n    while(j.hasNext()) {\n      var doc \u003d DocumentApp.openById(j.next().getId());\n      var currentBody \u003d doc.getBody();\n      var range \u003d currentBody.findText(\"^TODO.*?$\");\n      \n      while(range)\n      {\n        var myPar \u003d range.getElement().asText().getText();\n        todoList.push([doc.getName(), myPar]);\n        range \u003d currentBody.findText(\"^TODO.*?$\", range);\n        Logger.log(\"From \" + doc.getName() + \"... \" + myPar);\n      } // \\while searching all of j\n    } // \\while each doc in entry\n  }\n  \n  //compose them into an email if there is anything\n  if(todoList.length \u003d\u003d 0 \u0026\u0026 masterTodos.length \u003d\u003d 0)\n    return;\n  \n  var mailBody \u003d \"Daily TODO list from notebook: \\n\\n\";\n  if(todoList.length \u003e 0) {\n    for(var i \u003d 0; i \u003c todoList.length; i++) {\n      mailBody \u003d mailBody.concat(todoList[i][0], \": \", todoList[i][1].replace(\"TODO\", \"\"), \"\\n\");\n    }\n  }\n  \n  if(masterTodos.length \u003e 0) {    \n    mailBody \u003d mailBody.concat(\"\\n----\\n\");\n    for(var i \u003d 0; i \u003c masterTodos.length; i++) {\n      mailBody \u003d mailBody.concat(\"M: \", masterTodos[i].replace(\"TODO\", \"\"), \"\\n\");\n    }\n  }\n  \n  mailBody \u003d mailBody.concat(\"\\n\\n-Sent automatically from Notebook\\n\");  \n  MailApp.sendEmail(email, \n                    \"TODO summary\", \n                    mailBody);\n}\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////Below be tests//////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n/* tests all of the functions with an N postfix \n * I\u0027m lazy, so I\u0027m commenting in/out lines as I want them and lookinga t object values in the debugger.*/\nfunction test_notebookSuite()\n{\n  //make test notebook structure n.                                  // V V V TODO, fill with auto values if it is already generated, make the next 2 lines conditional\n  var n \u003d new Notebook(1, \"test_Book\", \"Things for the test folder\", 0, 0, 0, 0);\n  n \u003d makeNewNotebookTree(n, DriveApp.getRootFolder().getId()); //pass\n  n \u003d makeNewMasterNotebook(n, 0, \"Testamungous\"); //pass (didn\u0027t test image yet)\n  \n  makeNewEntryN(n); //pass\n  makeNewSummaryN(n); //pass\n  highlightTODON(n); //pass (Enough)\n  globWeeklyEntriesN(n);\n  \n}\n\n//ez pass first time\nfunction testMoveFile()\n{\n  var fold1 \u003d DriveApp.createFolder(\"fold1\");\n  var fold2 \u003d DriveApp.createFolder(\"fold2\");\n  var file1 \u003d DriveApp.createFile(\"file1\", \"test for moveFile\");\n  var file2 \u003d DriveApp.createFile(\"file2\", \"test for moveFile\");\n  \n  moveFile(file1, fold1);\n  moveFile(file2, fold2);\n  \n  try{\n    moveFile(0, fold2, fold1);\n  } catch(err) {\n    Logger.log(\"Expected Err: \" + err);\n  }\n  \n  try{\n    moveFile(file1, 0, fold1);\n  } catch(err) {\n    Logger.log(\"Expected Err: \" + err);\n  }\n  \n  moveFile(file1, fold2, fold1);\n  moveFile(file2, fold1, fold2);\n}\n\n//pass\n//  It doesn\u0027t do list items quiiiiiite perfectly, but its close enough for me bc i don\u0027t need fancy dots in something i\u0027ll read twice\nfunction testConcatDocs()\n{\n  var c_base \u003d DocumentApp.openById(DriveApp.getFilesByName(\"Concat Base\").next().getId());\n  var c_next \u003d  DocumentApp.openById(DriveApp.getFilesByName(\"Concat Test\").next().getId());\n  \n  concatDocs(c_base, c_next);\n  \n}\n//pass\nfunction testMakeNewMasterNotebook()\n{\n  var d \u003d new Date(); \n  \n  /*Make one in root*/\n  var root \u003d DriveApp.getRootFolder();\n  var nameRoot \u003d \"ATestNotebookInRoot\" + d.getMilliseconds();\n  var noteBlob \u003d makeNewNotebookTree(nameRoot);\n\n  makeNewMasterNotebook(noteBlob[\"master\"], nameRoot, \"Something about Will Smith but I can\u0027t remember who he is\", 0, \"Jayden Smith\");\n  \n  /*Make one in a folder*/\n  var nameOther \u003d \"ATestNotebookInOther\" + d.getMilliseconds() + \"_\" + d.getMilliseconds();\n  var fol1 \u003d root.createFolder(nameOther);\n  var noteBlob2 \u003d makeNewNotebookTree(nameOther + nameRoot, fol1);\n  \n  makeNewMasterNotebook(noteBlob2[\"master\"], nameOther, \"less puns mo code\");\n}\n\n//pass\nfunction testExtractHeading()\n{\n  var doc \u003d DocumentApp.openById(DriveApp.getFilesByName(\u0027Test_Doc\u0027).next().getId());\n  var body \u003d doc.getBody();\n  \n  Logger.log(\"Extract one Title, no replace\");\n  var title \u003d extractHeading(body,DocumentApp.ParagraphHeading.HEADING1,0,0, false);\n  Logger.log(title);\n  \n  Logger.log(\"Extract all normals, replace with h2\");\n  var h2 \u003d extractHeading(body, DocumentApp.ParagraphHeading.NORMAL, true, true, DocumentApp.ParagraphHeading.HEADING2);\n  Logger.log(h2.length);\n  \n  Logger.log(\"return first H2s, replace with title\");\n  var firstH2 \u003d extractHeading(body, DocumentApp.ParagraphHeading.HEADING2, false, true, DocumentApp.ParagraphHeading.HEADING1);\n  Logger.log(firstH2);\n  \n  Logger.log(\"Using all default arguments\");\n  var title \u003d extractHeading(body);\n  Logger.log(title);\n}\n\n//pass\nfunction testExtractTitle()\n{\n  var doc \u003d DocumentApp.openById(DriveApp.getFilesByName(\u0027Test_Doc\u0027).next().getId());\n  \n  var body \u003d doc.getBody();\n  \n  var title \u003d extractTitle(body);\n  \n  Logger.log(title);\n}"},{"id":"6f24fcc0-6eaf-4bb2-a4ce-313999adc516","name":"NotebookGeneration","type":"server_js","source":"//TODO I also should keep old summaries and make some way so that master can be regenerated completely from the Old folder\n\n/*****************************************************************************\n * Add a new notebook to this drive\n */ \nfunction addNewNotebook()\n{\n  var ui \u003d DocumentApp.getUi();\n  ui.alert(\"To create a notebook, we\u0027re going to need the following settings:\\n \" +\n           \" + short title \\n\" +\n           \" + long title (Optional. Default is to copy the short title\u0027s value over) \\n\" +\n           \" + pick the directory to create your notebook in. (not implemented, just creates in root rn.)\\n\" +\n           \" + pick a cover image (upload, select existing image, or leave it blank) \\n\");\n           \n  var shortName \u003d ui.prompt(\"Enter short name of your notebook\", ui.ButtonSet.OK);\n  var longName \u003d ui.prompt(\"Enter long name of your notebook (Optional)\", ui.ButtonSet.OK_CANCEL);\n  //pick a directory one day?\n  //pick an image one day .. too complicated now and I\u0027m too lazy.\n  \n  var newBook \u003d new Notebook(longName, shortName, longName, DriveApp.getRootFolder().getId(), \"\", \"\", \"\");\n  \n  newBook \u003d makeNewNotebookTree(newBook);\n  newBook \u003d makeNewMasterNotebook(newBook,0,0);\n  //save for later\n  var props \u003d PropertiesService.getUserProperties();\n  props.setProperty(newBook.iD, JSON.stringify(newBook)); //get back with JSON.parse()\n  props.setProperty(\"CurrentNotebook\", newBook.iD);\n    \n}\n/*****************************************************************************\n * Notebook object constructor\n */\nfunction Notebook(iD, shortName, longName, rootFolderId, masterNotebookId, oldFolderId, masterFolderId)\n{\n  this.iD \u003d iD;\n  this.shortName \u003d shortName;\n  this.longName \u003d longName;\n  this.rootFolderId \u003d rootFolderId;\n  this.oldFolderId \u003d oldFolderId;\n  this.masterFolderId \u003d masterFolderId;\n  this.masterNotebookId \u003d masterNotebookId;\n}\n/*****************************************************************************\n * Creates a new notebook tree structure and returns the root folder\n * tested\n */\nfunction makeNewNotebookTree(notebook, folderIdToMakeItIn) {\n  //validate\n  notebook.shortName \u003d  notebook.shortName || \"Notebook\";\n  folderIdToMakeItIn \u003d  folderIdToMakeItIn ||  DriveApp.getRootFolder();\n  \n  var inFolder \u003d DriveApp.getFolderById(folderIdToMakeItIn);\n  //Create new folder structure\n  //root\n  // |--\u003enotebookName\n  //      |--\u003eOldentries\n  //      |--\u003enotebookName_Master\n  \n  //if rootfolder exists. set notebook fields *grossly unsafely* and bail\n  /*var fldrs \u003d rootFolder.searchFolders(notebook.shortName); //I\u0027m still having issues with search queries\n  if(fldrs.hasNext())\n  {\n    var notebookFolder \u003d fldrs.next();\n    var conts \u003d notebookFolders.getFolders();\n    \n    notebook.oldFolderId \u003d conts.next().getId();\n    notebook.masterFolderId \u003d conts.next().getId();\n    \n    return notebook;\n  } */\n  \n  //otherwise make it on the fly, solidly.\n  var notebookFolder \u003d inFolder.createFolder(notebook.shortName);\n  var oldFolder \u003d notebookFolder.createFolder(\"Old Entries\");\n  var masterFolder \u003d notebookFolder.createFolder(notebook.shortName + \"_Master\");\n  \n  notebook.rootFolderId \u003d notebookFolder.getId();\n  notebook.oldFolderId \u003d oldFolder.getId();\n  notebook.masterFolderId \u003d masterFolder.getId();\n  \n  return notebook;\n}\n\n/*****************************************************************************\n * Creates a new master entry from notebook object, + image file ID + optional author name. \n *\n * Updates notebook object with masterNotebookId.\n * \n * and return the updated notebook object\n * TODO make sure the image option works.\n */\nfunction makeNewMasterNotebook(notebook, imageFileID,  humanName) {\n  //validate\n  notebook.shortName \u003d notebook.shortName || \"Notebook\";\n  notebook.longName \u003d notebook.longName || notebook.shortName || \"Notebook\";\n    //image can be nothing\n  humanName \u003d humanName || Session.getActiveUser().getEmail();\n  \n  var masterFolder \u003d DriveApp.getFolderById(notebook.masterFolderId);\n  Logger.log(masterFolder);\n  \n  var mDoc \u003d DocumentApp.create(notebook.shortName);\n  notebook.masterNotebookId \u003d mDoc.getId();\n  var docFile \u003d DriveApp.getFileById(notebook.masterNotebookId );\n  \n  moveFile(docFile, masterFolder, DriveApp.getRootFolder());\n  \n  var title \u003d mDoc.getBody().appendParagraph(notebook.longName);\n  title.setHeading(DocumentApp.ParagraphHeading.TITLE);\n  \n  var subtitle \u003d mDoc.getBody().appendParagraph(\"by: \" + humanName);\n  subtitle.setHeading(DocumentApp.ParagraphHeading.SUBTITLE);\n  \n  if(imageFileID)\n  {\n    var blob \u003d DriveApp.getFileById(imageFileID).getBlob();\n    mDoc.getBody().appendImage(blob);\n  }\n  \n  return notebook; \n}\n"}]}